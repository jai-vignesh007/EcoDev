"use strict";var _=Object.create;var m=Object.defineProperty;var b=Object.getOwnPropertyDescriptor;var E=Object.getOwnPropertyNames;var I=Object.getPrototypeOf,T=Object.prototype.hasOwnProperty;var C=(e,t)=>{for(var n in t)m(e,n,{get:t[n],enumerable:!0})},p=(e,t,n,o)=>{if(t&&typeof t=="object"||typeof t=="function")for(let r of E(t))!T.call(e,r)&&r!==n&&m(e,r,{get:()=>t[r],enumerable:!(o=b(t,r))||o.enumerable});return e};var k=(e,t,n)=>(n=e!=null?_(I(e)):{},p(t||!e||!e.__esModule?m(n,"default",{value:e,enumerable:!0}):n,e)),A=e=>p(m({},"__esModule",{value:!0}),e);var v={};C(v,{handler:()=>q});module.exports=A(v);var u=require("@aws-sdk/client-dynamodb"),d=k(require("crypto")),S=new u.DynamoDBClient({}),N=process.env.COMMITS_TABLE,H=process.env.REPOINFO_TABLE,P=process.env.GITHUB_WEBHOOK_SECRET||"";function i(e,t){return{statusCode:e,headers:{"Content-Type":"application/json","Access-Control-Allow-Origin":"*","Access-Control-Allow-Methods":"POST,OPTIONS","Access-Control-Allow-Headers":"Content-Type,X-GitHub-Event,X-Hub-Signature-256"},body:typeof t=="string"?t:JSON.stringify(t)}}function R(e,t,n){if(!e||!n)return!1;let o=Buffer.from("sha256="+d.default.createHmac("sha256",n).update(t).digest("hex"),"utf8"),r=Buffer.from(e,"utf8");return r.length===o.length&&d.default.timingSafeEqual(r,o)}function h(e,t){let n=e.headers||{},o=t.toLowerCase();return n[o]??n[t]}function L(e){return e.isBase64Encoded?Buffer.from(e.body||"","base64"):typeof e.body=="string"?Buffer.from(e.body,"utf8"):Buffer.from(JSON.stringify(e.body||{}),"utf8")}var q=async e=>{try{if(e.requestContext?.http?.method==="OPTIONS")return i(200,{ok:!0});let t=L(e),n=h(e,"X-Hub-Signature-256"),o=h(e,"X-GitHub-Event")||"";if(!R(n,t,P))return console.warn("Signature verification failed"),i(401,{error:"invalid signature"});let r=JSON.parse(t.toString("utf8"));if(o==="ping")return i(200,{pong:!0});if(o!=="push")return console.log(`Ignoring event type: ${o}`),i(200,{ok:!0,ignored:o});let f=r.repository||{},c=f.full_name||"unknown/unknown",y=f.language||"unknown",w=r.ref||"",O=r.pusher?.name||r.sender?.login||"unknown",g=Array.isArray(r.commits)?r.commits:[];await S.send(new u.PutItemCommand({TableName:H,Item:{pk:{S:c},sk:{S:"info"},language:{S:y},default_branch:{S:f.default_branch||"main"},updated_at:{S:new Date().toISOString()}}}));let l=[];for(let a=0;a<g.length;a+=25)l.push(g.slice(a,a+25));for(let a of l){let B={[N]:a.map(s=>({PutRequest:{Item:{pk:{S:c},sk:{S:`${Date.now()}#${s.id}`},sha:{S:s.id},message:{S:s.message||""},author_name:{S:s.author?.name||""},author_email:{S:s.author?.email||""},committer_name:{S:s.committer?.name||""},committer_email:{S:s.committer?.email||""},added_count:{N:String((s.added||[]).length)},removed_count:{N:String((s.removed||[]).length)},modified_count:{N:String((s.modified||[]).length)},ref:{S:w},pusher:{S:O},timestamp:{S:s.timestamp||""}}}}))};await S.send(new u.BatchWriteItemCommand({RequestItems:B}))}return i(200,{ok:!0,written_commits:g.length,repo:c})}catch(t){return console.error("Unhandled error:",t),i(500,{error:"internal error",message:t?.message||"unknown"})}};0&&(module.exports={handler});
